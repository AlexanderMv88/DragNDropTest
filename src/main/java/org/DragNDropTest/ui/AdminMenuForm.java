package org.DragNDropTest.ui;

import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.shared.ui.grid.DropMode;
import com.vaadin.ui.*;
import com.vaadin.ui.components.grid.GridDragSource;
import com.vaadin.ui.components.grid.GridDropTarget;
import org.DragNDropTest.entity.Employee;
import org.springframework.web.client.RestClientException;
import org.vaadin.crudui.crud.CrudListener;
import org.vaadin.crudui.crud.CrudOperation;
import org.vaadin.crudui.crud.impl.GridCrud;
import org.vaadin.crudui.form.AbstractAutoGeneratedCrudFormFactory;
import org.vaadin.crudui.form.CrudFormFactory;
import org.vaadin.crudui.layout.impl.HorizontalSplitCrudLayout;
import org.vaadin.crudui.form.impl.form.factory.VerticalCrudFormFactory;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;


public class AdminMenuForm extends Panel implements View {

    private MenuBar menuBar = new MenuBar();
    private VerticalLayout vLayout = new VerticalLayout();
    private Label lbl = new Label();
    private List<Employee> employees = new ArrayList<>();
    private Employee dragged = null;
    private GridCrud<Employee> crud;
    public void setLblTime(String currentTimeStr) {
        this.lbl.setCaption(currentTimeStr);
    }

    public AdminMenuForm() {
        crud = createEmployeeCrudUI();
        makeGridDragNDrop(crud.getGrid());
        vLayout.addComponents(lbl, crud/*,hLayout*/);
        this.setContent(vLayout);
    }

    private void makeGridDragNDrop(Grid<Employee> grid) {
        GridDragSource<Employee> source = new GridDragSource<>(grid);
        source.addGridDragStartListener(e -> {
            dragged = e.getDraggedItems().iterator().next();
        });
        GridDropTarget<Employee> target = new GridDropTarget<>(grid, DropMode.ON_TOP_OR_BETWEEN);
        target.addGridDropListener(e -> {
            String[] names = e.getDataTransferText().split("\n");
            for (String name: names) {
                Employee empl = new Employee(name);
                ((NavigatorUI) getUI()).employeeRepository.save(empl);
                refreshEmployeeGrid();
            }
        });
    }

    private void renameCrudWindowButtons(AbstractAutoGeneratedCrudFormFactory crudFormFactory) {
        crudFormFactory.setButtonCaption(CrudOperation.ADD, "Создать");
        crudFormFactory.setButtonCaption(CrudOperation.UPDATE, "Изменить");
        crudFormFactory.setButtonCaption(CrudOperation.DELETE, "Удалить");
        crudFormFactory.setCancelButtonCaption("Отмена");
        crudFormFactory.setButtonCaption(CrudOperation.READ, "Сброс");
    }
    private GridCrud<Employee> createEmployeeCrudUI() {
        GridCrud<Employee> objCrudUI = new GridCrud<>(Employee.class, new HorizontalSplitCrudLayout());
        VerticalCrudFormFactory<Employee> objFormFactory = new VerticalCrudFormFactory<>(Employee.class);
        renameCrudWindowButtons(objFormFactory);
        Map<String, String> columnsWithCaptions = new LinkedHashMap<String, String>() {
            {
                this.put("fullName", "ФИО");
                this.put("department", "Отдел");
                this.put("position", "Должность");
                this.put("phone", "Телефон");
                this.put("mobilePhone", "Сотовый");
            }
        };
        setCaptionsToGridAndWindow(objFormFactory, objCrudUI, columnsWithCaptions);
        objCrudUI.setCrudFormFactory(objFormFactory);
        objCrudUI.getGrid().getColumn("id").setHidden(true);
        objCrudUI.setCrudListener(new CrudListener<Employee>() {
            @Override
            public Collection<Employee> findAll() {
                return ((NavigatorUI) getUI()).employeeRepository.findAll();
            }

            @Override
            public Employee add(Employee employee) {
                return ((NavigatorUI) getUI()).employeeRepository.save(employee);
            }

            @Override
            public Employee update(Employee employee) {
                return ((NavigatorUI) getUI()).employeeRepository.save(employee);
            }

            @Override
            public void delete(Employee employee) {
                ((NavigatorUI) getUI()).employeeRepository.delete(employee);
            }
        });

        return objCrudUI;
    }

    private void removeEmployee() {

    }

    public void enter(ViewChangeListener.ViewChangeEvent event) {

    }

    private void setCaptionsToGridAndWindow(AbstractAutoGeneratedCrudFormFactory crudFormFactory, GridCrud crudUI, Map<String, String> columnsWithCaptions) {
        String[] columns = columnsWithCaptions.keySet().toArray(new String[columnsWithCaptions.keySet().size()]);
        crudFormFactory.setVisibleProperties(columns);
        String[] captions = columnsWithCaptions.values().toArray(new String[columnsWithCaptions.values().size()]);
        crudFormFactory.setFieldCaptions(captions);

        for (Map.Entry<String, String> entry : columnsWithCaptions.entrySet()) {
            String column = entry.getKey();
            String caption = entry.getValue();
            crudUI.getGrid().getColumn(column).setCaption(caption);
        }
    }

    private void refreshEmployeeGrid()  {
        crud.refreshGrid();
    }


}